// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.4
// source: auth/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserActivate = "/auth.v1.User/Activate"
const OperationUserAdd = "/auth.v1.User/Add"
const OperationUserDeactivate = "/auth.v1.User/Deactivate"
const OperationUserEdit = "/auth.v1.User/Edit"

type UserHTTPServer interface {
	Activate(context.Context, *ActivateRequest) (*UserNothing, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Deactivate(context.Context, *DeactivateRequest) (*UserNothing, error)
	Edit(context.Context, *EditRequest) (*UserNothing, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/users/add", _User_Add0_HTTP_Handler(srv))
	r.POST("/v1/users/edit", _User_Edit0_HTTP_Handler(srv))
	r.POST("/v1/users/activate", _User_Activate0_HTTP_Handler(srv))
	r.POST("/v1/users/deactivate", _User_Deactivate0_HTTP_Handler(srv))
}

func _User_Add0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddResponse)
		return ctx.Result(200, reply)
	}
}

func _User_Edit0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserEdit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Edit(ctx, req.(*EditRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserNothing)
		return ctx.Result(200, reply)
	}
}

func _User_Activate0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserActivate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Activate(ctx, req.(*ActivateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserNothing)
		return ctx.Result(200, reply)
	}
}

func _User_Deactivate0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeactivateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeactivate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deactivate(ctx, req.(*DeactivateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserNothing)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	Activate(ctx context.Context, req *ActivateRequest, opts ...http.CallOption) (rsp *UserNothing, err error)
	Add(ctx context.Context, req *AddRequest, opts ...http.CallOption) (rsp *AddResponse, err error)
	Deactivate(ctx context.Context, req *DeactivateRequest, opts ...http.CallOption) (rsp *UserNothing, err error)
	Edit(ctx context.Context, req *EditRequest, opts ...http.CallOption) (rsp *UserNothing, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) Activate(ctx context.Context, in *ActivateRequest, opts ...http.CallOption) (*UserNothing, error) {
	var out UserNothing
	pattern := "/v1/users/activate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserActivate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Add(ctx context.Context, in *AddRequest, opts ...http.CallOption) (*AddResponse, error) {
	var out AddResponse
	pattern := "/v1/users/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Deactivate(ctx context.Context, in *DeactivateRequest, opts ...http.CallOption) (*UserNothing, error) {
	var out UserNothing
	pattern := "/v1/users/deactivate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeactivate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Edit(ctx context.Context, in *EditRequest, opts ...http.CallOption) (*UserNothing, error) {
	var out UserNothing
	pattern := "/v1/users/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserEdit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
