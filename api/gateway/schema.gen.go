// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "gateway/api/gateway/auth"
	externalRef1 "gateway/api/gateway/common"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// PostChangePasswordJSONBody defines parameters for PostChangePassword.
type PostChangePasswordJSONBody = externalRef0.ChangePasswordRequestBody

// GetAuthCheckParams defines parameters for GetAuthCheck.
type GetAuthCheckParams struct {
	// Auth token from Query
	AuthToken *externalRef1.AuthTokenInQuery `form:"authToken,omitempty" json:"authToken,omitempty"`
}

// PostGenerateCodeJSONBody defines parameters for PostGenerateCode.
type PostGenerateCodeJSONBody = externalRef0.GenerateCodeRequestBody

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody = externalRef0.LoginRequestBody

// PostAuthLoginByCodeJSONBody defines parameters for PostAuthLoginByCode.
type PostAuthLoginByCodeJSONBody = externalRef0.LoginByCodeRequestBody

// PostNewPasswordJSONBody defines parameters for PostNewPassword.
type PostNewPasswordJSONBody = externalRef0.NewPasswordRequestBody

// PostResetPasswordJSONBody defines parameters for PostResetPassword.
type PostResetPasswordJSONBody = externalRef0.ResetPasswordRequestBody

// PostChangePasswordJSONRequestBody defines body for PostChangePassword for application/json ContentType.
type PostChangePasswordJSONRequestBody = PostChangePasswordJSONBody

// PostGenerateCodeJSONRequestBody defines body for PostGenerateCode for application/json ContentType.
type PostGenerateCodeJSONRequestBody = PostGenerateCodeJSONBody

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = PostAuthLoginJSONBody

// PostAuthLoginByCodeJSONRequestBody defines body for PostAuthLoginByCode for application/json ContentType.
type PostAuthLoginByCodeJSONRequestBody = PostAuthLoginByCodeJSONBody

// PostNewPasswordJSONRequestBody defines body for PostNewPassword for application/json ContentType.
type PostNewPasswordJSONRequestBody = PostNewPasswordJSONBody

// PostResetPasswordJSONRequestBody defines body for PostResetPassword for application/json ContentType.
type PostResetPasswordJSONRequestBody = PostResetPasswordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/1/auth/changePassword)
	PostChangePassword(c *gin.Context)

	// (GET /api/1/auth/check)
	GetAuthCheck(c *gin.Context, params GetAuthCheckParams)

	// (POST /api/1/auth/generateCode)
	PostGenerateCode(c *gin.Context)

	// (POST /api/1/auth/login)
	PostAuthLogin(c *gin.Context)

	// (POST /api/1/auth/loginByCode)
	PostAuthLoginByCode(c *gin.Context)

	// (POST /api/1/auth/newPassword)
	PostNewPassword(c *gin.Context)

	// (POST /api/1/auth/resetPassword)
	PostResetPassword(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// PostChangePassword operation middleware
func (siw *ServerInterfaceWrapper) PostChangePassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostChangePassword(c)
}

// GetAuthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetAuthCheck(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthCheckParams

	// ------------- Optional query parameter "authToken" -------------
	if paramValue := c.Query("authToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "authToken", c.Request.URL.Query(), &params.AuthToken)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter authToken: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAuthCheck(c, params)
}

// PostGenerateCode operation middleware
func (siw *ServerInterfaceWrapper) PostGenerateCode(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGenerateCode(c)
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAuthLogin(c)
}

// PostAuthLoginByCode operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLoginByCode(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAuthLoginByCode(c)
}

// PostNewPassword operation middleware
func (siw *ServerInterfaceWrapper) PostNewPassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostNewPassword(c)
}

// PostResetPassword operation middleware
func (siw *ServerInterfaceWrapper) PostResetPassword(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostResetPassword(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/api/1/auth/changePassword", wrapper.PostChangePassword)

	router.GET(options.BaseURL+"/api/1/auth/check", wrapper.GetAuthCheck)

	router.POST(options.BaseURL+"/api/1/auth/generateCode", wrapper.PostGenerateCode)

	router.POST(options.BaseURL+"/api/1/auth/login", wrapper.PostAuthLogin)

	router.POST(options.BaseURL+"/api/1/auth/loginByCode", wrapper.PostAuthLoginByCode)

	router.POST(options.BaseURL+"/api/1/auth/newPassword", wrapper.PostNewPassword)

	router.POST(options.BaseURL+"/api/1/auth/resetPassword", wrapper.PostResetPassword)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yZTW8bNxPHvwrB5zkkwHYlp+mhusUGGrgvSZqk6CHNgZFoaRuL3JIrG2ogQC9N08B5",
	"aVP02qDoF1Bdq9nKtvQVZr5RMeTKXtlyI8SJmgC+LZfkcDj8/zhc7j1e1vVYK6kSy0v3uJXlhomS5o1y",
	"Tdale7UshZHmUiOpUemOK32kTV0kvMQ//vImD7h1rXkpq+UBT5oxlWtJEvNWqxXwSK1p6l+RtmyiOIm0",
	"4iV+6doquywSuSmaTKgKo/IKOWQjasGsNBtRWbI1bdiKMFVNpqWp26trN3xVNkipULCbolqVJox0wTUp",
	"UNsoWacmVT8GD/iGNNaPvRQuhUu8FXAdSyXiiJf4+2ExLPKAxyKpubkXRBwVlgqikdQK5ZpQVXlNWLup",
	"TeX4XOA5tiGFfUhhD/owwC6DXRjBn/SSnYMR7DP4CwasYaVRoi4DdvgO9mEEezDANsMuDGAXBvgdVUOf",
	"QQq7kDLoww62YYAdho+pAQyxi23XiHr/zWAMI3yAXdw6HzDsYBf62MYtqkn9CNu+NKYKGJHZkMEzhh3Y",
	"xR4+ILcZ9rADYxjgfRp7m3yCffyJpjOmOuz6wUbYdbXd8CtFMdM2oaDoWBpBIVmt8BK/pm2yMh24gBv5",
	"TUPaZFlXmtSjrFUiless4ng9Krvuha8thfWeF5egp/8bucZLPPTr4d+HTVFf/1/hUMXZe3tkva7nxmw5",
	"RRppY62sF/mF4sX5RzjoefB0Ra9kk2gF/GKxOGWrrOt1reawJo3RZllMfCVbH5zK1qpKSGrrHkHbqNeF",
	"aZJUf/fq8JqAIS20fyS5jnICwacMO6QCqtohjR4Ia0Zb8ngaGVm+O4OUZzCCF7CNbejjwwkrO86ffdwi",
	"DXadvHv4EAZ+lD5sk/AcYi+cq/1M95kT5MCjSZVnCJ864ecNzzbXx+8hzYGEHcIMO5A6QH4hPjyBQ+xC",
	"CtsT4OY3QwEeYDegqY1mY+UdzHnrwarKGVxdlgntyCsuwMe0XHwVLbvFup4Vr37yupV8sbh0CltfKJqF",
	"NtG3suKsXfjwFNZuav2ZUM3MO/u6QYuFEXWZSGN56db8Ng+7uSW7qe9Ktao+b0jT5K3bU/w+d3KnHXvg",
	"Es4UMSnez8mICuOTEXnCvLDn1XHA6NnjQOmm4zLRDuzjU8ItT0j/6HZQlYo0LFd0Rb7l+TNk8LOLLWGa",
	"Yht73qGh27O6MHTJtA0DGjTjlXIiRcLFse/j7F9T653ZUU5d/CmXjl2vbdq2/FjZVkVTmJ7TwYwm/vZO",
	"3ABflpsv55dkUZk5r4OzvJzn+tecDlxWPiaoScJzkqIWM0V1lLx1XY3U24/c/CfREzcsB5w7og4JzJfp",
	"n5Lopy44ixK/W4qXqv6VMnhm+k1l8Dek+R+PLyVlEpezDsRIW1yaP2s+mSnx5eY7kFv8jv8vmeK/JSGL",
	"4UJ58GOeUfFqVMxKEntU59SEvaOoKLn5jlxjuOn50xN24A9qhh2ylfvoXMANxpVcwBbFRW6Rzs5Ip7m7",
	"GDtJjvAhPsInDO/jY/zh8PjkRUlfN7gFuzB0hROUdpQjI61M3hGSFkDJ9alwLIqTqUU4IyVPym8THR+H",
	"YjT1oeE+8j0YfXZuJhO9I9SlJ1N3nmGPFOPvC50w3R0F7J14CcGd59m/B3dpkv/rcOu2u/6QZmNypXL8",
	"L4JWzCaiGqkqk2ojMlrVaaEC3jDr2T8CWyoUsh8BYVmYqg7vvGekrYWmwVu3W/8EAAD//x4jcukLGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./auth/schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./common/schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
