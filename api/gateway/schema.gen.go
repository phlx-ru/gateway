// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package gateway

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// CheckResponse defines model for checkResponse.
type CheckResponse struct {
	Session struct {
		// Возможный DeviceID если запрос пришёл от мобильного устройства
		DeviceId *string `json:"deviceId,omitempty"`

		// IP-адрес запроса, породившего сессию
		Ip *string `json:"ip,omitempty"`

		// Время, до которого сессия активна
		Until time.Time `json:"until"`

		// User-Agent запроса, породившего сессию
		UserAgent *string `json:"userAgent,omitempty"`
	} `json:"session"`
	User struct {
		// Отображаемое имя пользователя
		DisplayName string `json:"displayName"`

		// Электронная почта
		Email *string `json:"email,omitempty"`

		// Российский номер мобильного телефона в произвольной форме
		Phone *string `json:"phone,omitempty"`

		// Тип пользователя из набора (admin|dispatcher|driver)
		Type string `json:"type"`
	} `json:"user"`
}

// CommonError defines model for commonError.
type CommonError struct {
	Error struct {
		// Error code
		Code int `json:"code"`

		// Error message
		Message string `json:"message"`

		// Typed reason of error
		Reason string `json:"reason"`
	} `json:"error"`
}

// TokenInHeaders defines model for tokenInHeaders.
type TokenInHeaders = string

// TokenInQuery defines model for tokenInQuery.
type TokenInQuery = string

// CheckResponseOK defines model for checkResponseOK.
type CheckResponseOK = CheckResponse

// GetAuthCheckParams defines parameters for GetAuthCheck.
type GetAuthCheckParams struct {
	// Auth token from Query
	AuthToken *TokenInQuery `form:"authToken,omitempty" json:"authToken,omitempty"`

	// Auth token from Headers
	XAuthToken *TokenInHeaders `json:"x-auth-token,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/1/auth/check)
	GetAuthCheck(c *gin.Context, params GetAuthCheckParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetAuthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetAuthCheck(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthCheckParams

	// ------------- Optional query parameter "authToken" -------------
	if paramValue := c.Query("authToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "authToken", c.Request.URL.Query(), &params.AuthToken)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter authToken: %s", err)})
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "x-auth-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth-token")]; found {
		var XAuthToken TokenInHeaders
		n := len(valueList)
		if n != 1 {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Expected one value for x-auth-token, got %d", n)})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-auth-token", runtime.ParamLocationHeader, valueList[0], &XAuthToken)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter x-auth-token: %s", err)})
			return
		}

		params.XAuthToken = &XAuthToken

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAuthCheck(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/1/auth/check", wrapper.GetAuthCheck)

	return router
}
