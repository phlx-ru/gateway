// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// CommonError defines model for commonError.
type CommonError struct {
	Error struct {
		// Error code
		Code int `json:"code"`

		// Error message
		Message string `json:"message"`

		// Typed reason of error
		Reason string `json:"reason"`
	} `json:"error"`
}

// Авторизационный токен для пользовательской сессии
type PropertyAuthToken = string

// Авторизационный токен для пользовательской сессии
type AuthTokenInHeaders = PropertyAuthToken

// Авторизационный токен для пользовательской сессии
type AuthTokenInQuery = PropertyAuthToken

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RU3W7jRBR+ldGBS2+bUhVtfRe60Npq0y2k3eVPq6l9Ek9rz0xnJqVpFYn2AgktEjwB",
	"z7CsqDbskvAKx2+ExnbSlBSB4PL8fef7vuPxFSSq0EqidBbCK9Dc8AIdmiriA5d11SnKSO4gT5tsijYx",
	"QjuhJITQHriMOd/EekYVbNYYgPDlrAohAMkLhBAuHnnQR9UABGCTDAvuUd832IMQ3lu9I7RaV+2qNkqj",
	"ccP2jA+MRsEiu4MBmuE/c6vbGmZnTdAQm6P9L1ajAAxaraTFyqtEFYWSHxujTB1Kh9JV3mqdi4R7pqsn",
	"1tO9+pd7FzGrjfdFb1Vl1n4aMWx6ZooeosTTVPhJnj+t9QjPvMdziwHohdQV4H+YSVSKy4eptrOqFgBe",
	"8ELnCOFGqxWAG2p/DiEd9tHAKIACreX9v0WZlReAoJuhQSYss6pAlwnZZ98YJfswx7fOCNmH6l68sf8+",
	"eneoMWV1laleY+biFv/JvJil/4JbAZ8NhMEUwi+hkdrsutP09XxQHZ9g4pYGa/jltrnPC5/fkgT6iV6X",
	"NzQtv6UxvaFX5Xc0pilNaFK+pN+YL9FbuqUJo1/pXfkjoz9oSu/KH+gNTek1vSpv6NbH5TW9pakfuabb",
	"8rq8pjGN73mBwzg73k7Evoijw8torSMiG8lPN5Kt6MPoVD8/2oo3V3AY62R9zzddfvE8/oA/6+S725+s",
	"pdt9sbsV57jTFvsnyUanu3+x1z1c7zyJN1fOO6fPePvsvHvo+pdHn7WzOH4Sb7YOdvVH0V7+efri8Ske",
	"HK+dHe08fuAMI//ae+oBb36mX8rvaUy3rNL2e6V94t0ob8qXX/krOeEqcfWTYQu/ygDO0dgaaW2ltdLy",
	"F1EaJdcCQlivUgFo7jILoRzk+ejPAAAA//9p56QTawUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
