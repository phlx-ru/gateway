// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// ErrorCommon defines model for errorCommon.
type ErrorCommon struct {
	Error struct {
		// Error code
		Code int `json:"code"`

		// Error message
		Message string `json:"message"`

		// Typed reason of error
		Reason string `json:"reason"`
	} `json:"error"`
}

// Авторизационный токен для пользовательской сессии
type PropertyAuthToken = string

// Авторизационный токен для пользовательской сессии
type AuthTokenInHeaders = PropertyAuthToken

// Авторизационный токен для пользовательской сессии
type AuthTokenInQuery = PropertyAuthToken

// ErrorBadRequest defines model for errorBadRequest.
type ErrorBadRequest = ErrorCommon

// ErrorInternal defines model for errorInternal.
type ErrorInternal = ErrorCommon

// ErrorTooManyRequests defines model for errorTooManyRequests.
type ErrorTooManyRequests = ErrorCommon

// ErrorUnauthorized defines model for errorUnauthorized.
type ErrorUnauthorized = ErrorCommon

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xV3U4bRxR+ldG0lxtYh1IF3xnSwq7AhMSQ9E/RsHvsHdidGc+MKQZZKlxUqlKpfYI+",
	"QxoVxU2K+wpn36ia2bWxC1VbReLOc36+7zt/3nOayEJJAcIa2jynimlWgAXtX2xgs448BhGJLWBpbU3B",
	"JJory6WgTdoa2IxYF0S6WhZkGhhQ7tyZf9KAClYAbdLTBw70gU+gATVJBgVzqB9r6NIm/Wj5RtBy5TXL",
	"SksF2g5bUz10NArm1e0NQA//XVsVVivr149a2Aztg1SNAqrBKCkM+F6B1lKvs/Qp9AdgrDMlUlgQ/idT",
	"KucJc2qXj4yTfP4fuT3uhiwKWbMuFv5JGJJ1lpIp7Sig8xn3pKLykNaTiPjImYxIWNCC5fclZDUMyZST",
	"PAN9App8tqCoI+UOE8O6X+be5vRwjXSkJI6bzMinovaFW0qp+Rmk97c5DbLA60Lq3NlC36wRS1PuMln+",
	"pLoG7va+y3IDAVVzpjrzf+YkMoXbZ+1HR7wvoHDKCpUDba6GYUDtULlj5sJCD/x4CzCG9f4RZeqeA6Kd",
	"DDQQboiRBdiMix75VkvRozN8YzUXPeqvndXtX0TvDBWkpPIS2a0PYJ7F9fjl1Pw3XA/cH3DtBv8VrUut",
	"uW5q+maWKA+PILG3Eiv422GzPs/9ed0qAX/GN+UlTsrvcIxv8XX5PY5xgtd4Xb7C34lz4Tu8wmuCv+H7",
	"8ieCf+IE35c/4luc4Bt8XV7ilXuXF/gOJy7lAq/Ki/ICxzhe6AUM4+xwM+G7PI72z6JGm0cmEk9Xk43o",
	"0+hYvTjYiNeWYBirZGXHBZ19+SJ+yJ638+3NzxvpZo9vb8Q5bLX47lGy2u7snu509lfaj+O1pZP28XPW",
	"6p909m3v7OBZK4vjx/FauLet1qOd/Iv05aNj2Dts9A+2Ht0xhpH7VnTlHb35BX8tf8AxXhFf2x++9mvX",
	"jfKyfPW1m5Ll1heXVH+Dcx/agJ6ANhVSYylcCt1EpALBFKdNuuJNAVXMZoY2xSDPR38FAAD//8T5Prep",
	"BwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
